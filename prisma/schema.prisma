generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  passwordHash          String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  accounts              Account[]
  candidateApplications CandidateApplication[]
  jobs                  Job[]
  meetings              Meeting[]
  sessions              Session[]
  messagesSent          MessageHistory[]
}

model CandidateApplication {
  id             String            @id @default(cuid())
  userId         String?
  jobId          String?
  firstName      String
  lastName       String
  email          String
  phone          String?
  position       String
  experience     String
  skills         String
  education      String?
  status         ApplicationStatus @default(PENDING)
  cvFileName     String?
  cvFileType     String?
  cvFileSize     Int?
  cvFileData     Bytes?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  job            Job?              @relation(fields: [jobId], references: [id])
  user           User?             @relation(fields: [userId], references: [id])
  cvAnalysis     CvAnalysis?
  meetings       Meeting[]
  messageHistory MessageHistory[]

  @@index([email])
  @@index([createdAt])
  @@index([position])
  @@index([status])
}

model CvAnalysis {
  id                     String               @id @default(cuid())
  candidateApplicationId String               @unique
  analyzedText           String?
  summary                String?
  technicalSkills        Json?
  experienceYears        Int?
  matchScore             Float?
  interviewQuestions     Json?
  aiProvider             String?              @default("openai")
  aiModel                String?              @default("gpt-4o-mini")
  tokenUsage             Int?
  processingTimeMs       Int?
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  candidateApplication   CandidateApplication @relation(fields: [candidateApplicationId], references: [id], onDelete: Cascade)

  @@index([candidateApplicationId])
  @@index([matchScore])
  @@index([createdAt])
}

model Job {
  id               String                 @id @default(cuid())
  title            String
  slug             String                 @unique
  department       String?
  location         String?
  employmentType   String?
  seniority        String?
  description      String
  requirements     String?
  responsibilities String?
  benefits         String?
  goldenCandidate  Json?
  status           JobStatus              @default(DRAFT)
  openings         Int                    @default(1)
  publishedAt      DateTime?
  ownerId          String?
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  applications     CandidateApplication[]
  owner            User?                  @relation(fields: [ownerId], references: [id])

  @@index([status])
  @@index([publishedAt])
  @@index([ownerId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @map("refreshToken")
  access_token      String? @map("accessToken")
  expires_at        Int?    @map("expiresAt")
  token_type        String? @map("tokenType")
  scope             String?
  id_token          String? @map("idToken")
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Meeting {
  id              String               @id @default(cuid())
  candidateId     String
  recruiterId     String
  title           String
  description     String?
  startTime       DateTime
  endTime         DateTime
  timeZone        String               @default("Europe/Warsaw")
  meetingLink     String?
  calendarEventId String?
  status          MeetingStatus        @default(SCHEDULED)
  notes           String?
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  candidate       CandidateApplication @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  recruiter       User                 @relation(fields: [recruiterId], references: [id], onDelete: Cascade)

  @@index([candidateId])
  @@index([recruiterId])
  @@index([startTime])
  @@index([status])
}

model MessageHistory {
  id                     String               @id @default(cuid())
  candidateApplicationId String
  candidateApplication   CandidateApplication @relation(fields: [candidateApplicationId], references: [id], onDelete: Cascade)
  
  // Message content
  subject                String
  content                String
  template               String?              // Template used (positive, neutral, negative, ai)
  
  // Recipient info
  recipientEmail         String
  recipientName          String
  
  // Sender info
  senderUserId           String?
  senderUser             User?                @relation(fields: [senderUserId], references: [id], onDelete: SetNull)
  
  // Email service details
  mailProvider           String               @default("mailchimp") // mailchimp, resend, etc.
  externalMessageId      String?              // ID from mail service
  status                 MessageStatus        @default(SENT)
  
  // Metadata
  sentAt                 DateTime             @default(now())
  deliveredAt            DateTime?
  errorMessage           String?
  
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt

  @@index([candidateApplicationId])
  @@index([recipientEmail])
  @@index([sentAt])
  @@index([status])
}

enum JobStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  OPEN
  PAUSED
  CLOSED
}

enum ApplicationStatus {
  PENDING
  REJECTED
  WAITING
  INTERVIEW
  HIRED
  WITHDRAWN
}

enum MeetingStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum MessageStatus {
  SENT
  DELIVERED
  FAILED
  BOUNCED
}
